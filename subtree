#!/usr/bin/env bash
# A script to manage subtree command
set -e 

# Function to add a new subtree
add_subtree() {
  local path="$1"
  local repo_url="$2"
  local branch="$3"

  if [ -d "$path" ]; then
    echo "Subtree path $path already exists. Skipping add."
  else
    echo "Adding subtree at $path from $repo_url ($branch)..."
    git subtree add --prefix="$path" "$repo_url" "$branch" --squash
  fi
}

# Function to push changes to a subtree
push_subtree() {
  local path="$1"
  local repo_url="$2"
  local branch="$3"

  echo "Pushing changes from $path to $repo_url ($branch)..."
  git subtree push --prefix="$path" "$repo_url" "$branch" --squash
}

# Function to pull updates from a subtree
push_subtree() {
  local path="$1"
  local repo_url="$2"
  local branch="$3"

  echo "Pulling updates into $path from $repo_url ($branch)..."
  git subtree pull --prefix="$path" "$repo_url" "$branch" --squash
}

# Parse command-line arguments
command="$1"
subtree_path="$2"
subtree_repo_url="$3"
branch="${4:-main}"

if [ -z "$command" ] || [ -z "$subtree_path" ] || [ -z "$subtree_repo_url" ]; then
  echo "Usage: $0 <add|push|pull> <subtree_path> <subtree_repo_url> [branch]"
  exit 1
fi 

case "$command" in 
  add)
    add_subtree "$subtree_path" "$subtree_repo_url" "$branch"
    ;;
  push)
    push_subtree "$subtree_path" "$subtree_repo_url" "$branch"
    ;;
  pull)
    pull_subtree "$subtree_path" "$subtree_repo_url" "$branch"
    ;;
  *)
    echo "Unkown command: $command"
    echo "Usage: $0 <add|push|pull> <subtree_path> <subtree_repo_url> [branch]"
    exit 1
    ;;
esac

